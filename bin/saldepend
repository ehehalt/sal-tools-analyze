#!/usr/bin/env ruby

require 'pathname'
require_relative '../lib/sal/code.rb'

# SalDepend analyses file include depends between files

PROGVERSION = "0.0.1"
PROGNAME = "SalDepend"

# --- functions ---

def help
	puts "#{PROGNAME} Version #{PROGVERSION}"
	puts
	puts "Analyses SalFiles and returns file include dependencies in the file(s):"
	puts
	puts "# Filename"
	puts "## Window Name"
	puts "### Tab Name"
	puts "* assosiated child"
	puts
	puts "Check c:\\temp\\example.apl for example:"
	puts
	puts "  #{PROGNAME.downcase} c:\\temp\\example.apl"
	puts 
	puts "Check all SalFiles in the directory c:\\temp:"
	puts 
	puts "  #{PROGNAME.downcase} c:\\temp"
	puts
end

def info(file, files)

  if Sal::Format.get_from_file(file) == Sal::Format::TEXT
  	# puts "Load file #{file}"
  	baseName = File.basename(file)
  	code = Sal::Code.new file
	  code.libraries.each do | lib |
	  	libName = File.basename(lib.name)
	  	puts "  #{baseName} -> #{libName};" if files.include? lib.name
	  end
	end
  # puts code.display false
end

# --- main program ---

if ARGV.length > 0
  arg = ARGV[0]
  begin
  	files = []
    if File.directory? arg
    	pwd = Dir.pwd
    	Dir.chdir arg
    	dir = Pathname.new(arg)
		  # aufgesplittet, da Dir.glob( "**/*.ap[lpt]" ) case sensitive ist und Dir.glob( "**/*.app" ) nicht. Stand Ruby 1.9.2p290.
	    # Problem existiert unter Ruby 2.2.3 (Windows) nicht mehr.
	    Dir.glob( "**/*.app" ) { | file | files << (dir + Pathname.new(file)).to_s }
		  Dir.glob( "**/*.apl" ) { | file | files << (dir + Pathname.new(file)).to_s }
		  Dir.glob( "**/*.apt" ) { | file | files << (dir + Pathname.new(file)).to_s }

		  Dir.chdir pwd
    else
      files << arg
    end
    puts "digraph {"
    puts "  layout=\"circo\";"
    baseNameFiles = files.collect { | file | File.basename(file) }
    files.sort.each do | file |
    	info(file, baseNameFiles)
    end
    puts "}"
  rescue StandardError => error
    puts "#{PROGNAME} - Error: #{error}"
		puts error.backtrace
  end
else
  help
end

